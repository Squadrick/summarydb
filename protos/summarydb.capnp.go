// Code generated by capnpc-go. DO NOT EDIT.

package protos

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type OpType uint16

// OpType_TypeID is the unique identifier for the type OpType.
const OpType_TypeID = 0x86bf862b548c351a

// Values of OpType.
const (
	OpType_count OpType = 0
	OpType_sum   OpType = 1
	OpType_bloom OpType = 2
	OpType_cms   OpType = 3
	OpType_max   OpType = 4
	OpType_freq  OpType = 5
)

// String returns the enum's constant name.
func (c OpType) String() string {
	switch c {
	case OpType_count:
		return "count"
	case OpType_sum:
		return "sum"
	case OpType_bloom:
		return "bloom"
	case OpType_cms:
		return "cms"
	case OpType_max:
		return "max"
	case OpType_freq:
		return "freq"

	default:
		return ""
	}
}

// OpTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func OpTypeFromString(c string) OpType {
	switch c {
	case "count":
		return OpType_count
	case "sum":
		return OpType_sum
	case "bloom":
		return OpType_bloom
	case "cms":
		return OpType_cms
	case "max":
		return OpType_max
	case "freq":
		return OpType_freq

	default:
		return 0
	}
}

type OpType_List struct{ capnp.List }

func NewOpType_List(s *capnp.Segment, sz int32) (OpType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return OpType_List{l.List}, err
}

func (l OpType_List) At(i int) OpType {
	ul := capnp.UInt16List{List: l.List}
	return OpType(ul.At(i))
}

func (l OpType_List) Set(i int, v OpType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type DataTable struct{ capnp.Struct }

// DataTable_TypeID is the unique identifier for the type DataTable.
const DataTable_TypeID = 0xcb0c4f3a25bf3079

func NewDataTable(s *capnp.Segment) (DataTable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return DataTable{st}, err
}

func NewRootDataTable(s *capnp.Segment) (DataTable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return DataTable{st}, err
}

func ReadRootDataTable(msg *capnp.Message) (DataTable, error) {
	root, err := msg.Root()
	return DataTable{root.Struct()}, err
}

func (s DataTable) String() string {
	str, _ := text.Marshal(0xcb0c4f3a25bf3079, s.Struct)
	return str
}

func (s DataTable) Count() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s DataTable) SetCount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s DataTable) Max() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s DataTable) SetMax(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s DataTable) Sum() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s DataTable) SetSum(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// DataTable_List is a list of DataTable.
type DataTable_List struct{ capnp.List }

// NewDataTable creates a new list of DataTable.
func NewDataTable_List(s *capnp.Segment, sz int32) (DataTable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return DataTable_List{l}, err
}

func (s DataTable_List) At(i int) DataTable { return DataTable{s.List.Struct(i)} }

func (s DataTable_List) Set(i int, v DataTable) error { return s.List.SetStruct(i, v.Struct) }

func (s DataTable_List) String() string {
	str, _ := text.MarshalList(0xcb0c4f3a25bf3079, s.List)
	return str
}

// DataTable_Future is a wrapper for a DataTable promised by a client call.
type DataTable_Future struct{ *capnp.Future }

func (p DataTable_Future) Struct() (DataTable, error) {
	s, err := p.Future.Struct()
	return DataTable{s}, err
}

type ProtoSummaryWindow struct{ capnp.Struct }

// ProtoSummaryWindow_TypeID is the unique identifier for the type ProtoSummaryWindow.
const ProtoSummaryWindow_TypeID = 0xd03e3591895dbdfb

func NewProtoSummaryWindow(s *capnp.Segment) (ProtoSummaryWindow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return ProtoSummaryWindow{st}, err
}

func NewRootProtoSummaryWindow(s *capnp.Segment) (ProtoSummaryWindow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return ProtoSummaryWindow{st}, err
}

func ReadRootProtoSummaryWindow(msg *capnp.Message) (ProtoSummaryWindow, error) {
	root, err := msg.Root()
	return ProtoSummaryWindow{root.Struct()}, err
}

func (s ProtoSummaryWindow) String() string {
	str, _ := text.Marshal(0xd03e3591895dbdfb, s.Struct)
	return str
}

func (s ProtoSummaryWindow) Ts() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s ProtoSummaryWindow) SetTs(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s ProtoSummaryWindow) Te() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s ProtoSummaryWindow) SetTe(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s ProtoSummaryWindow) Cs() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s ProtoSummaryWindow) SetCs(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s ProtoSummaryWindow) Ce() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s ProtoSummaryWindow) SetCe(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

func (s ProtoSummaryWindow) OpData() (DataTable, error) {
	p, err := s.Struct.Ptr(0)
	return DataTable{Struct: p.Struct()}, err
}

func (s ProtoSummaryWindow) HasOpData() bool {
	return s.Struct.HasPtr(0)
}

func (s ProtoSummaryWindow) SetOpData(v DataTable) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewOpData sets the opData field to a newly
// allocated DataTable struct, preferring placement in s's segment.
func (s ProtoSummaryWindow) NewOpData() (DataTable, error) {
	ss, err := NewDataTable(s.Struct.Segment())
	if err != nil {
		return DataTable{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ProtoSummaryWindow_List is a list of ProtoSummaryWindow.
type ProtoSummaryWindow_List struct{ capnp.List }

// NewProtoSummaryWindow creates a new list of ProtoSummaryWindow.
func NewProtoSummaryWindow_List(s *capnp.Segment, sz int32) (ProtoSummaryWindow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return ProtoSummaryWindow_List{l}, err
}

func (s ProtoSummaryWindow_List) At(i int) ProtoSummaryWindow {
	return ProtoSummaryWindow{s.List.Struct(i)}
}

func (s ProtoSummaryWindow_List) Set(i int, v ProtoSummaryWindow) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ProtoSummaryWindow_List) String() string {
	str, _ := text.MarshalList(0xd03e3591895dbdfb, s.List)
	return str
}

// ProtoSummaryWindow_Future is a wrapper for a ProtoSummaryWindow promised by a client call.
type ProtoSummaryWindow_Future struct{ *capnp.Future }

func (p ProtoSummaryWindow_Future) Struct() (ProtoSummaryWindow, error) {
	s, err := p.Future.Struct()
	return ProtoSummaryWindow{s}, err
}

func (p ProtoSummaryWindow_Future) OpData() DataTable_Future {
	return DataTable_Future{Future: p.Future.Field(0, nil)}
}

type ProtoLandmarkWindow struct{ capnp.Struct }

// ProtoLandmarkWindow_TypeID is the unique identifier for the type ProtoLandmarkWindow.
const ProtoLandmarkWindow_TypeID = 0xcdf64d2c4abfe20f

func NewProtoLandmarkWindow(s *capnp.Segment) (ProtoLandmarkWindow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ProtoLandmarkWindow{st}, err
}

func NewRootProtoLandmarkWindow(s *capnp.Segment) (ProtoLandmarkWindow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ProtoLandmarkWindow{st}, err
}

func ReadRootProtoLandmarkWindow(msg *capnp.Message) (ProtoLandmarkWindow, error) {
	root, err := msg.Root()
	return ProtoLandmarkWindow{root.Struct()}, err
}

func (s ProtoLandmarkWindow) String() string {
	str, _ := text.Marshal(0xcdf64d2c4abfe20f, s.Struct)
	return str
}

func (s ProtoLandmarkWindow) Ts() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s ProtoLandmarkWindow) SetTs(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s ProtoLandmarkWindow) Te() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s ProtoLandmarkWindow) SetTe(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s ProtoLandmarkWindow) Timestamps() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int64List{List: p.List()}, err
}

func (s ProtoLandmarkWindow) HasTimestamps() bool {
	return s.Struct.HasPtr(0)
}

func (s ProtoLandmarkWindow) SetTimestamps(v capnp.Int64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTimestamps sets the timestamps field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s ProtoLandmarkWindow) NewTimestamps(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ProtoLandmarkWindow) Values() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s ProtoLandmarkWindow) HasValues() bool {
	return s.Struct.HasPtr(1)
}

func (s ProtoLandmarkWindow) SetValues(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s ProtoLandmarkWindow) NewValues(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ProtoLandmarkWindow_List is a list of ProtoLandmarkWindow.
type ProtoLandmarkWindow_List struct{ capnp.List }

// NewProtoLandmarkWindow creates a new list of ProtoLandmarkWindow.
func NewProtoLandmarkWindow_List(s *capnp.Segment, sz int32) (ProtoLandmarkWindow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return ProtoLandmarkWindow_List{l}, err
}

func (s ProtoLandmarkWindow_List) At(i int) ProtoLandmarkWindow {
	return ProtoLandmarkWindow{s.List.Struct(i)}
}

func (s ProtoLandmarkWindow_List) Set(i int, v ProtoLandmarkWindow) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ProtoLandmarkWindow_List) String() string {
	str, _ := text.MarshalList(0xcdf64d2c4abfe20f, s.List)
	return str
}

// ProtoLandmarkWindow_Future is a wrapper for a ProtoLandmarkWindow promised by a client call.
type ProtoLandmarkWindow_Future struct{ *capnp.Future }

func (p ProtoLandmarkWindow_Future) Struct() (ProtoLandmarkWindow, error) {
	s, err := p.Future.Struct()
	return ProtoLandmarkWindow{s}, err
}

type ExpWindow struct{ capnp.Struct }

// ExpWindow_TypeID is the unique identifier for the type ExpWindow.
const ExpWindow_TypeID = 0xccb7f73c66a69be1

func NewExpWindow(s *capnp.Segment) (ExpWindow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpWindow{st}, err
}

func NewRootExpWindow(s *capnp.Segment) (ExpWindow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpWindow{st}, err
}

func ReadRootExpWindow(msg *capnp.Message) (ExpWindow, error) {
	root, err := msg.Root()
	return ExpWindow{root.Struct()}, err
}

func (s ExpWindow) String() string {
	str, _ := text.Marshal(0xccb7f73c66a69be1, s.Struct)
	return str
}

func (s ExpWindow) Base() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s ExpWindow) SetBase(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// ExpWindow_List is a list of ExpWindow.
type ExpWindow_List struct{ capnp.List }

// NewExpWindow creates a new list of ExpWindow.
func NewExpWindow_List(s *capnp.Segment, sz int32) (ExpWindow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ExpWindow_List{l}, err
}

func (s ExpWindow_List) At(i int) ExpWindow { return ExpWindow{s.List.Struct(i)} }

func (s ExpWindow_List) Set(i int, v ExpWindow) error { return s.List.SetStruct(i, v.Struct) }

func (s ExpWindow_List) String() string {
	str, _ := text.MarshalList(0xccb7f73c66a69be1, s.List)
	return str
}

// ExpWindow_Future is a wrapper for a ExpWindow promised by a client call.
type ExpWindow_Future struct{ *capnp.Future }

func (p ExpWindow_Future) Struct() (ExpWindow, error) {
	s, err := p.Future.Struct()
	return ExpWindow{s}, err
}

type PowerWindow struct{ capnp.Struct }

// PowerWindow_TypeID is the unique identifier for the type PowerWindow.
const PowerWindow_TypeID = 0xc06345e07edc6c60

func NewPowerWindow(s *capnp.Segment) (PowerWindow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return PowerWindow{st}, err
}

func NewRootPowerWindow(s *capnp.Segment) (PowerWindow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return PowerWindow{st}, err
}

func ReadRootPowerWindow(msg *capnp.Message) (PowerWindow, error) {
	root, err := msg.Root()
	return PowerWindow{root.Struct()}, err
}

func (s PowerWindow) String() string {
	str, _ := text.Marshal(0xc06345e07edc6c60, s.Struct)
	return str
}

func (s PowerWindow) P() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s PowerWindow) SetP(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s PowerWindow) Q() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PowerWindow) SetQ(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PowerWindow) R() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PowerWindow) SetR(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s PowerWindow) S() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s PowerWindow) SetS(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

// PowerWindow_List is a list of PowerWindow.
type PowerWindow_List struct{ capnp.List }

// NewPowerWindow creates a new list of PowerWindow.
func NewPowerWindow_List(s *capnp.Segment, sz int32) (PowerWindow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return PowerWindow_List{l}, err
}

func (s PowerWindow_List) At(i int) PowerWindow { return PowerWindow{s.List.Struct(i)} }

func (s PowerWindow_List) Set(i int, v PowerWindow) error { return s.List.SetStruct(i, v.Struct) }

func (s PowerWindow_List) String() string {
	str, _ := text.MarshalList(0xc06345e07edc6c60, s.List)
	return str
}

// PowerWindow_Future is a wrapper for a PowerWindow promised by a client call.
type PowerWindow_Future struct{ *capnp.Future }

func (p PowerWindow_Future) Struct() (PowerWindow, error) {
	s, err := p.Future.Struct()
	return PowerWindow{s}, err
}

type Stream struct{ capnp.Struct }
type Stream_window Stream
type Stream_window_Which uint16

const (
	Stream_window_Which_exp   Stream_window_Which = 0
	Stream_window_Which_power Stream_window_Which = 1
)

func (w Stream_window_Which) String() string {
	const s = "exppower"
	switch w {
	case Stream_window_Which_exp:
		return s[0:3]
	case Stream_window_Which_power:
		return s[3:8]

	}
	return "Stream_window_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Stream_TypeID is the unique identifier for the type Stream.
const Stream_TypeID = 0xcf7581f95c7adbb1

func NewStream(s *capnp.Segment) (Stream, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Stream{st}, err
}

func NewRootStream(s *capnp.Segment) (Stream, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Stream{st}, err
}

func ReadRootStream(msg *capnp.Message) (Stream, error) {
	root, err := msg.Root()
	return Stream{root.Struct()}, err
}

func (s Stream) String() string {
	str, _ := text.Marshal(0xcf7581f95c7adbb1, s.Struct)
	return str
}

func (s Stream) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Stream) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Stream) Operators() (OpType_List, error) {
	p, err := s.Struct.Ptr(0)
	return OpType_List{List: p.List()}, err
}

func (s Stream) HasOperators() bool {
	return s.Struct.HasPtr(0)
}

func (s Stream) SetOperators(v OpType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewOperators sets the operators field to a newly
// allocated OpType_List, preferring placement in s's segment.
func (s Stream) NewOperators(n int32) (OpType_List, error) {
	l, err := NewOpType_List(s.Struct.Segment(), n)
	if err != nil {
		return OpType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Stream) Window() Stream_window { return Stream_window(s) }

func (s Stream_window) Which() Stream_window_Which {
	return Stream_window_Which(s.Struct.Uint16(8))
}
func (s Stream_window) Exp() (ExpWindow, error) {
	if s.Struct.Uint16(8) != 0 {
		panic("Which() != exp")
	}
	p, err := s.Struct.Ptr(1)
	return ExpWindow{Struct: p.Struct()}, err
}

func (s Stream_window) HasExp() bool {
	if s.Struct.Uint16(8) != 0 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Stream_window) SetExp(v ExpWindow) error {
	s.Struct.SetUint16(8, 0)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewExp sets the exp field to a newly
// allocated ExpWindow struct, preferring placement in s's segment.
func (s Stream_window) NewExp() (ExpWindow, error) {
	s.Struct.SetUint16(8, 0)
	ss, err := NewExpWindow(s.Struct.Segment())
	if err != nil {
		return ExpWindow{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Stream_window) Power() (PowerWindow, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != power")
	}
	p, err := s.Struct.Ptr(1)
	return PowerWindow{Struct: p.Struct()}, err
}

func (s Stream_window) HasPower() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Stream_window) SetPower(v PowerWindow) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPower sets the power field to a newly
// allocated PowerWindow struct, preferring placement in s's segment.
func (s Stream_window) NewPower() (PowerWindow, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPowerWindow(s.Struct.Segment())
	if err != nil {
		return PowerWindow{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Stream_List is a list of Stream.
type Stream_List struct{ capnp.List }

// NewStream creates a new list of Stream.
func NewStream_List(s *capnp.Segment, sz int32) (Stream_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Stream_List{l}, err
}

func (s Stream_List) At(i int) Stream { return Stream{s.List.Struct(i)} }

func (s Stream_List) Set(i int, v Stream) error { return s.List.SetStruct(i, v.Struct) }

func (s Stream_List) String() string {
	str, _ := text.MarshalList(0xcf7581f95c7adbb1, s.List)
	return str
}

// Stream_Future is a wrapper for a Stream promised by a client call.
type Stream_Future struct{ *capnp.Future }

func (p Stream_Future) Struct() (Stream, error) {
	s, err := p.Future.Struct()
	return Stream{s}, err
}

func (p Stream_Future) Window() Stream_window_Future { return Stream_window_Future{p.Future} }

// Stream_window_Future is a wrapper for a Stream_window promised by a client call.
type Stream_window_Future struct{ *capnp.Future }

func (p Stream_window_Future) Struct() (Stream_window, error) {
	s, err := p.Future.Struct()
	return Stream_window{s}, err
}

func (p Stream_window_Future) Exp() ExpWindow_Future {
	return ExpWindow_Future{Future: p.Future.Field(1, nil)}
}

func (p Stream_window_Future) Power() PowerWindow_Future {
	return PowerWindow_Future{Future: p.Future.Field(1, nil)}
}

type DB struct{ capnp.Struct }

// DB_TypeID is the unique identifier for the type DB.
const DB_TypeID = 0xa008ac86fde19106

func NewDB(s *capnp.Segment) (DB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DB{st}, err
}

func NewRootDB(s *capnp.Segment) (DB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DB{st}, err
}

func ReadRootDB(msg *capnp.Message) (DB, error) {
	root, err := msg.Root()
	return DB{root.Struct()}, err
}

func (s DB) String() string {
	str, _ := text.Marshal(0xa008ac86fde19106, s.Struct)
	return str
}

func (s DB) StreamIds() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int64List{List: p.List()}, err
}

func (s DB) HasStreamIds() bool {
	return s.Struct.HasPtr(0)
}

func (s DB) SetStreamIds(v capnp.Int64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewStreamIds sets the streamIds field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s DB) NewStreamIds(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// DB_List is a list of DB.
type DB_List struct{ capnp.List }

// NewDB creates a new list of DB.
func NewDB_List(s *capnp.Segment, sz int32) (DB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return DB_List{l}, err
}

func (s DB_List) At(i int) DB { return DB{s.List.Struct(i)} }

func (s DB_List) Set(i int, v DB) error { return s.List.SetStruct(i, v.Struct) }

func (s DB_List) String() string {
	str, _ := text.MarshalList(0xa008ac86fde19106, s.List)
	return str
}

// DB_Future is a wrapper for a DB promised by a client call.
type DB_Future struct{ *capnp.Future }

func (p DB_Future) Struct() (DB, error) {
	s, err := p.Future.Struct()
	return DB{s}, err
}

type HeapItem struct{ capnp.Struct }

// HeapItem_TypeID is the unique identifier for the type HeapItem.
const HeapItem_TypeID = 0xb37ab58ad73179ce

func NewHeapItem(s *capnp.Segment) (HeapItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HeapItem{st}, err
}

func NewRootHeapItem(s *capnp.Segment) (HeapItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HeapItem{st}, err
}

func ReadRootHeapItem(msg *capnp.Message) (HeapItem, error) {
	root, err := msg.Root()
	return HeapItem{root.Struct()}, err
}

func (s HeapItem) String() string {
	str, _ := text.Marshal(0xb37ab58ad73179ce, s.Struct)
	return str
}

func (s HeapItem) Value() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s HeapItem) SetValue(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s HeapItem) Priority() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s HeapItem) SetPriority(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s HeapItem) Index() int32 {
	return int32(s.Struct.Uint32(12))
}

func (s HeapItem) SetIndex(v int32) {
	s.Struct.SetUint32(12, uint32(v))
}

// HeapItem_List is a list of HeapItem.
type HeapItem_List struct{ capnp.List }

// NewHeapItem creates a new list of HeapItem.
func NewHeapItem_List(s *capnp.Segment, sz int32) (HeapItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return HeapItem_List{l}, err
}

func (s HeapItem_List) At(i int) HeapItem { return HeapItem{s.List.Struct(i)} }

func (s HeapItem_List) Set(i int, v HeapItem) error { return s.List.SetStruct(i, v.Struct) }

func (s HeapItem_List) String() string {
	str, _ := text.MarshalList(0xb37ab58ad73179ce, s.List)
	return str
}

// HeapItem_Future is a wrapper for a HeapItem promised by a client call.
type HeapItem_Future struct{ *capnp.Future }

func (p HeapItem_Future) Struct() (HeapItem, error) {
	s, err := p.Future.Struct()
	return HeapItem{s}, err
}

type Heap struct{ capnp.Struct }

// Heap_TypeID is the unique identifier for the type Heap.
const Heap_TypeID = 0xf47bb59dbae61204

func NewHeap(s *capnp.Segment) (Heap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Heap{st}, err
}

func NewRootHeap(s *capnp.Segment) (Heap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Heap{st}, err
}

func ReadRootHeap(msg *capnp.Message) (Heap, error) {
	root, err := msg.Root()
	return Heap{root.Struct()}, err
}

func (s Heap) String() string {
	str, _ := text.Marshal(0xf47bb59dbae61204, s.Struct)
	return str
}

func (s Heap) Items() (HeapItem_List, error) {
	p, err := s.Struct.Ptr(0)
	return HeapItem_List{List: p.List()}, err
}

func (s Heap) HasItems() bool {
	return s.Struct.HasPtr(0)
}

func (s Heap) SetItems(v HeapItem_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewItems sets the items field to a newly
// allocated HeapItem_List, preferring placement in s's segment.
func (s Heap) NewItems(n int32) (HeapItem_List, error) {
	l, err := NewHeapItem_List(s.Struct.Segment(), n)
	if err != nil {
		return HeapItem_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Heap_List is a list of Heap.
type Heap_List struct{ capnp.List }

// NewHeap creates a new list of Heap.
func NewHeap_List(s *capnp.Segment, sz int32) (Heap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Heap_List{l}, err
}

func (s Heap_List) At(i int) Heap { return Heap{s.List.Struct(i)} }

func (s Heap_List) Set(i int, v Heap) error { return s.List.SetStruct(i, v.Struct) }

func (s Heap_List) String() string {
	str, _ := text.MarshalList(0xf47bb59dbae61204, s.List)
	return str
}

// Heap_Future is a wrapper for a Heap promised by a client call.
type Heap_Future struct{ *capnp.Future }

func (p Heap_Future) Struct() (Heap, error) {
	s, err := p.Future.Struct()
	return Heap{s}, err
}

type MergerIndexItem struct{ capnp.Struct }

// MergerIndexItem_TypeID is the unique identifier for the type MergerIndexItem.
const MergerIndexItem_TypeID = 0x875c7ec6203987d8

func NewMergerIndexItem(s *capnp.Segment) (MergerIndexItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MergerIndexItem{st}, err
}

func NewRootMergerIndexItem(s *capnp.Segment) (MergerIndexItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MergerIndexItem{st}, err
}

func ReadRootMergerIndexItem(msg *capnp.Message) (MergerIndexItem, error) {
	root, err := msg.Root()
	return MergerIndexItem{root.Struct()}, err
}

func (s MergerIndexItem) String() string {
	str, _ := text.Marshal(0x875c7ec6203987d8, s.Struct)
	return str
}

func (s MergerIndexItem) Swid() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s MergerIndexItem) SetSwid(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s MergerIndexItem) CEnd() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s MergerIndexItem) SetCEnd(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// MergerIndexItem_List is a list of MergerIndexItem.
type MergerIndexItem_List struct{ capnp.List }

// NewMergerIndexItem creates a new list of MergerIndexItem.
func NewMergerIndexItem_List(s *capnp.Segment, sz int32) (MergerIndexItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return MergerIndexItem_List{l}, err
}

func (s MergerIndexItem_List) At(i int) MergerIndexItem { return MergerIndexItem{s.List.Struct(i)} }

func (s MergerIndexItem_List) Set(i int, v MergerIndexItem) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MergerIndexItem_List) String() string {
	str, _ := text.MarshalList(0x875c7ec6203987d8, s.List)
	return str
}

// MergerIndexItem_Future is a wrapper for a MergerIndexItem promised by a client call.
type MergerIndexItem_Future struct{ *capnp.Future }

func (p MergerIndexItem_Future) Struct() (MergerIndexItem, error) {
	s, err := p.Future.Struct()
	return MergerIndexItem{s}, err
}

type MergerIndex struct{ capnp.Struct }

// MergerIndex_TypeID is the unique identifier for the type MergerIndex.
const MergerIndex_TypeID = 0xf1223767bd770235

func NewMergerIndex(s *capnp.Segment) (MergerIndex, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MergerIndex{st}, err
}

func NewRootMergerIndex(s *capnp.Segment) (MergerIndex, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MergerIndex{st}, err
}

func ReadRootMergerIndex(msg *capnp.Message) (MergerIndex, error) {
	root, err := msg.Root()
	return MergerIndex{root.Struct()}, err
}

func (s MergerIndex) String() string {
	str, _ := text.Marshal(0xf1223767bd770235, s.Struct)
	return str
}

func (s MergerIndex) Items() (MergerIndexItem_List, error) {
	p, err := s.Struct.Ptr(0)
	return MergerIndexItem_List{List: p.List()}, err
}

func (s MergerIndex) HasItems() bool {
	return s.Struct.HasPtr(0)
}

func (s MergerIndex) SetItems(v MergerIndexItem_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewItems sets the items field to a newly
// allocated MergerIndexItem_List, preferring placement in s's segment.
func (s MergerIndex) NewItems(n int32) (MergerIndexItem_List, error) {
	l, err := NewMergerIndexItem_List(s.Struct.Segment(), n)
	if err != nil {
		return MergerIndexItem_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// MergerIndex_List is a list of MergerIndex.
type MergerIndex_List struct{ capnp.List }

// NewMergerIndex creates a new list of MergerIndex.
func NewMergerIndex_List(s *capnp.Segment, sz int32) (MergerIndex_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MergerIndex_List{l}, err
}

func (s MergerIndex_List) At(i int) MergerIndex { return MergerIndex{s.List.Struct(i)} }

func (s MergerIndex_List) Set(i int, v MergerIndex) error { return s.List.SetStruct(i, v.Struct) }

func (s MergerIndex_List) String() string {
	str, _ := text.MarshalList(0xf1223767bd770235, s.List)
	return str
}

// MergerIndex_Future is a wrapper for a MergerIndex promised by a client call.
type MergerIndex_Future struct{ *capnp.Future }

func (p MergerIndex_Future) Struct() (MergerIndex, error) {
	s, err := p.Future.Struct()
	return MergerIndex{s}, err
}

const schema_91f0805429cab961 = "x\xda\x8cVoh\x1be\x18\x7f\x9e\xf7\xbdK\xd2m" +
	".\xb9]`\x1a\x9dqc\xc2Z\xed\xec\x1f\x8b\xac\xa8" +
	"\x9d\xd2B3Z\xd6\xb7\xad(\xa3\x83]\x93\xdb\x16\xec" +
	"\xe5n\x97\x8bI\xa6\x1b+\xac\xdd:60\xa0(\x88" +
	"\xe0'?)\"2dJ\xa9(\xfaA\x9d\xff@\x14" +
	"\xa6h\xf7A\xbfj\x11EDO\x9eKr\x17n\xc9" +
	"\xf4S\xde{\xf8\xf1<\xbf\xf7\xf7\xfb=w\xe9\x93\xf9" +
	"~\xd6/\xff \x03\x88Q9\xe2\xa6\x86.\xce\xde\xb3" +
	"\xbc\xb6\x0c\xcav\xe6jW>\xee\x9e=\xf3K\x0d\x00" +
	"\xd5\xaf\xd9\x86\xba\xce\xa2\x00\xea\xf7\xec\x05@\xf7\xdbs" +
	"\xfb\xee\xfa\xe8\xf4\xdc9\x10\xdb\xb1\x05)E\x01\x06w" +
	"\xf2aT\xfb9\x81{y\x19\xd0\x8d\xd4\xd6\xff^~" +
	"-\xf6\x0a(\xdb1\xc0\xcaH\x88\x15\xfe\x95\xfa\xbc\x87" +
	"\xad\xf1\x11@\xf7\xb3j\xff7\x17.\x9f|\xab]\xe3" +
	"\x0f9C\xf5K\x0f|\x95\xbf\x01\xe8\x1eY\xf8\xee\xf4" +
	"\x8fc\xd9\xf7\x08,\x85\xc0y)\x85j\x95\x8ejI" +
	"\xfa\x19\xd0\xbd\xfd\xdd\x0b\xef\xef\xbe\xb6\xf1\x01\x88;\x91" +
	"\xb9o^;9\xf7\xe7b\xe9sx\x8cE\x91\xa14" +
	"\x98\x91{\x10P\x1521\xae\xf6\xad\xdd=|p\xcb" +
	"'\xd4\x98\x87\x1a\xbf.oBuU\xa6\xc6Wdb" +
	"\xb1\xfe\xd2\xabG\x1f\xfc\xe3\xedO\x09\x8c!\xb0\x88l" +
	"BU\x8b\x10\xf8p\x84\xee\x17\xbf\xbev\xe0\xde\xc9\xdf" +
	"\xaf\x86\xee'\x93\xb6\x83\xa7\"\x87P\xady\xe8K\x11" +
	"\xe2\xec\xb3l\x83V\x97\xa2\x1bj-\xea\x81\xa3\xc4\xe3" +
	"\xaf\xd5\xc3+\xb5\xa1\x87\xbf\x08\xa9\xe1\xe9<\xb8#6" +
	"\x8dj\x7f\x8c\x8e\xbd\xb14\x02\xbaC\xac\xbcz\xec\x81" +
	"]\xbf\xb6qe\xf0\xa1\xae\x14\xaa\x93]\xd4;\xd3E" +
	"\xb4\xa5m?\xbd\xf3\xf2\xe5\xa7\x7fkga\xb5\xeb\xba" +
	"\xba\xe4a\x17\xbbF\xa0\xd7\xb5l\xd31\x8b\xf7\x15Y" +
	"\xc904\xbb\x9a\x9b\xdf\x9b\xd5\xac\x825|0m\xcd" +
	"V-}\x0aQ\xdc\x8a\x0c@yd\x00\x00Q\xd9\xb7" +
	"\x0b\x00\x99\xd2OO\\\xe9\xa6'I\xd9I?\xb2r" +
	"[\x0f@:k\x96\x0aN\xb4X2\xd2\xf3\x0b\xa6i" +
	"D\xb3F1jh\x95\xf8Q[?\xe1O\xe3\xa1i" +
	"\x93\xba}L\xb73\x85\xdc\x88^\xc98\xbaAcc" +
	"\\\x02\x90\x10@\xe9\xee\x01\x10\xbb9\x8a>\x86\x0ab" +
	"\x12\xa9\xd8K\xc5=\x1c\xc5\xfd\x0c\xe3\xc5r>\x872" +
	"0\x94\x01\xe3\xd9\xb1\x82\xff\xd0\xf1~\xa3\xf8(\x0d\x91" +
	"\xfc!\xb7L\x03\x88-\x1c\xc5\x1e\x86n\xd1\xb1u\xcd" +
	"\xc8\xe4\x00\x8b\xb8\x15p\x8a\xa3\xd7pkK\xc3\xf0\x15" +
	"\xc6u\xcd\"\xea@m\xb7\xf8m\xc7\x06\x00\xc4~\x8e" +
	"b\x82\xb8\xb3:\xf7\xcc\x01\x001\xceQ\xcc2T\x18" +
	"Oz\x02\x0bBNp\x14O0L?\xa5-\x94\xf4" +
	"\x96K\xe4M;\xefT\x81\xd4\x06\x86\x12`:_\xc8" +
	"\xe9\x95\xe6SGVSfY\xb7\x1f\xcf\x17r\xdc," +
	"\x13\xb1\x84OL\xdb\x06 \xe68\x8a\xe3-\xa2\xeaT" +
	"<\xc2Q,\x101V'\x96\xa7b\x8e\xa3\xb0\x18*" +
	"\x9c'\x91\x03(\x06\x15\x8fs\x14\x0eC\xb4\x9aL\xf1" +
	"\x84\x7f\xb2\xfdS\xf1\x063\xc2,g<\xb9\xf7\x96\xf3" +
	"\xf1B\xce,\x93\xf3w\xb8.\xd6\xa7S\xc4\x9a\xe6\xef" +
	"\xc0\x7f\xa8L\xf3{\x07\x02\xfb\xa3z\xc5\xc2D\xb0\xda" +
	"\x80\x98\x00L[twL\x04/\x9ez\xbd#\x8bQ" +
	"\xcd\xd1f\xb5\xf9\x05\x1dn\xeaaC\xaa\x0c\xf1\x1a\xe5" +
	"(\xa6Z\xa4\x9a\xdc\x15\x18[\xdf\x04\xdc\x0c\x0c7\x03" +
	"\xd2\x0e\xf8\xe7b\xc9h\x9e;\xb2\x19\xabX\xe4\x9bY" +
	"\xae\xb3i\x09*\x05?\xc6Q$\x19\xc6\xe7\xb5\xa2~" +
	"C+)\x1c\x02\xaaOh\x85\x9c\xa1\xd9O\xb6\x0fC" +
	"\xaa]\x18RA\x18\xb0\x99\x85C\x0d\xdb\xcfR\x16\x1a" +
	"^,\x0e\x03\x88g8\x8a\x17\x19r\xc7\xb7\x9b;A" +
	"\x82\x9d\xbc\xa1\x17\x1d\xcd\x00n\x857j\xc4\xcb\xba_" +
	"\xdd\x1c\xda\xb3\xf0\xe2\xce\xa4\xbd\xb0\x84\x1cJ\x05\x0e\xf9" +
	"\x06M7\xbc\xc8\x11}l\xf9\xa6(\xda00\x1e\xbc" +
	"1\\\xd3\xd2m\xcd1\xed\x96u\x8f\x07\x9fW@\x8f" +
	"f\xd9s\xe3\xe6\"\xcf\xd4\x8b\x9eq\xe8i\x9c\xf49" +
	"\x9e\"\x8e\x95\x86tM\x92\x8b\xa9\x86t\xe7[R\xb4" +
	"D\xc53\x1c\xc5\xc5\x96\x85[\xa1\xe2Y\x8e\xe2Y\x86" +
	"(%Q\x02P.\x91\xf0\xe79\x8a\xe7:\x09\xcf\xb3" +
	"A5\xebWGL\x8b\xc2\x8e\x89\xe0\xdb\xf9\x1f\xbb\xe1" +
	"\xbf\xa0\xb9^\x09\xc5q\xa0\x11\xc7\xdd\x0c\xd3yG7" +
	"|\x09\x13\xc1\x1f\x8f\xba\x84\x1d=\x1d\x8f\xea\x9a\xf5\xff" +
	"\xdb\xfa\x7f;\xeam\xff\x0d\x00\x00\xff\xff\x89 #\xe3"

func init() {
	schemas.Register(schema_91f0805429cab961,
		0x86bf862b548c351a,
		0x875c7ec6203987d8,
		0xa008ac86fde19106,
		0xb37ab58ad73179ce,
		0xc06345e07edc6c60,
		0xc3f2db24c28abb1b,
		0xcb0c4f3a25bf3079,
		0xccb7f73c66a69be1,
		0xcdf64d2c4abfe20f,
		0xcf7581f95c7adbb1,
		0xd03e3591895dbdfb,
		0xf1223767bd770235,
		0xf47bb59dbae61204)
}
